// Code generated by go-bindata.
// sources:
// migrations/1_initial.down.sql
// migrations/1_initial.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xc8\x4c\x49\xcd\x2d\xc8\x2f\x49\xcd\x4b\xae\x8c\xcf\x4e\xad\x2c\x8e\xcf\x4c\xa9\xb0\xe6\x02\x2b\x08\x71\x74\xf2\x71\x55\x28\x48\xac\xcc\x4d\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xd9\x58\xf7\x5c\x36\x00\x00\x00")

func _1_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialDownSql,
		"1_initial.down.sql",
	)
}

func _1_initialDownSql() (*asset, error) {
	bytes, err := _1_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xcd\x4e\xb3\x40\x14\xdd\xf3\x14\x67\xf7\x95\xe4\x6b\x52\xd7\xd5\x05\xe0\xd8\x8e\xc5\x41\x61\x88\x74\x45\x26\xe5\x06\x26\x6d\x67\x08\x8c\x3f\xbc\xbd\xa9\x54\xab\x2c\xbd\xdb\x73\xee\xf9\x8b\x52\x16\x48\x06\x19\x84\x31\x03\xbf\x83\x48\x24\x58\xc1\x33\x99\xa1\x55\xc3\x91\x8c\xeb\x31\xf3\x00\x40\x57\x90\xac\x90\x78\x4c\xf9\x43\x90\x6e\xb1\x61\xdb\xff\x67\x80\x8e\xad\x75\x64\x76\x43\xb9\xa7\x61\x64\x9d\x74\x44\x1e\xc7\x9f\x8c\xd3\xcd\xe7\x78\x26\x54\xd6\xfc\x73\x78\x53\xc6\xc1\x35\x84\x97\x9e\x3a\x90\x71\xd4\x69\x53\x43\x61\x9d\xaf\x18\xf6\x34\x7c\x7f\x45\x6b\x16\x6d\x30\xdb\x35\xaa\x2b\x0f\x64\x6a\xd7\xcc\x26\x76\x3e\xae\x6f\x70\xb5\x58\xf8\x63\x98\x57\xea\x7a\x6d\x0d\x42\xbe\xe2\xe2\x12\x63\x04\x6d\x57\x2b\xa3\x7b\xe5\xb4\x35\xe5\x57\x9f\xdf\x94\x3f\x99\xb6\x6a\x38\x58\x55\xe1\x3e\x4b\x44\x78\xa9\xee\x2f\x3d\xef\xbc\x6f\x2e\xf8\x53\xce\xc0\xc5\x2d\x2b\x26\x33\x4f\xa4\xfb\x52\x57\xef\x48\xc4\x8f\xf9\xa7\xe6\x4b\xef\x23\x00\x00\xff\xff\xb5\x44\xd9\xf6\xb6\x01\x00\x00")

func _1_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialUpSql,
		"1_initial.up.sql",
	)
}

func _1_initialUpSql() (*asset, error) {
	bytes, err := _1_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initial.down.sql": _1_initialDownSql,
	"1_initial.up.sql": _1_initialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_initial.down.sql": &bintree{_1_initialDownSql, map[string]*bintree{}},
	"1_initial.up.sql": &bintree{_1_initialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

